/* Generated By:JavaCC: Do not edit this line. GMLParser.java */
package org.arakhne.neteditor.io.gml.parser;

import org.arakhne.afc.text.TextUtil;
import org.arakhne.neteditor.io.gml.GMLConstants;
import org.arakhne.neteditor.io.gml.GMLException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

@SuppressWarnings("all")
public class GMLParser implements GMLConstants, GMLParserConstants {

        private Document xmlDocument = null;

        /** Run the lexer and the syntax analyzer.
	 * @param xmlDocument is the document that permits to create the DOM.
	 * @return the root of the DOM (just inside the given document).
	 * @throw GMLException
	 */
        public Element execute(Document xmlDocument) throws GMLException {
                try {
                        this.xmlDocument = xmlDocument;
                        Element gml = this.xmlDocument.createElement(N_GML);
                        this.xmlDocument.appendChild(gml);
                        list(gml);
                        return gml;
                }
                catch(Throwable e) {
                        throw new GMLException(e);
                }
                finally {
                        this.xmlDocument = null;
                }
        }

  final private void list(Element root) throws ParseException, GMLException {
  Element e1, e2, r;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEY:
      t = jj_consume_token(KEY);
                                                                  r = this.xmlDocument.createElement("gml:"+t.image.trim());
      value(r);
                                                                  root.appendChild(r);
      list(root);

      break;
    default:
      jj_la1[0] = jj_gen;

    }
  }

  final private void value(Element parent) throws ParseException, GMLException {
  Token t;
  Element e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
                                                          Double d = Double.valueOf(t.image);
                                                                          if (d.longValue() == d.doubleValue()) {
                                                                            parent.setAttribute(K_TYPE, K_INTEGER);
                                                                            parent.setAttribute(K_VALUE, Long.toString(d.longValue()));
                                                                          }
                                                                          else {
                                                                            parent.setAttribute(K_TYPE, K_FLOAT);
                                                                            parent.setAttribute(K_VALUE, d.toString());
                                                                          }
      break;
    case STRING:
      t = jj_consume_token(STRING);
                                                          parent.setAttribute(K_VALUE,
                                                                                        TextUtil.parseHTML(t.image.substring(1, t.image.length()-1)));
                                                                          parent.setAttribute(K_TYPE, K_STRING);
      break;
    case 14:
      jj_consume_token(14);
      list(parent);
      jj_consume_token(15);
                                                  parent.setAttribute(K_TYPE, K_LIST);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public GMLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1000,0x4440,};
   }

  /** Constructor with InputStream. */
  public GMLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GMLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GMLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public GMLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GMLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public GMLParser(GMLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GMLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[16];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
